name: Build and test

on:
  push:
    branches:
      - main
  workflow_dispatch:

# setting up the access key to aws-cli
env:
   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      # - name: Install Flake8
      #   run: pip install flake8
      # - name: Lint Python code
      #   run: flake8 .

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install pytest
  #       run: pip install pytest
  #     - name: Run unit tests
  #       run: pytest


  # Docker_Build_and_Push:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Install dependencies
  #       run: sed -i '/pkg-resources==0.0.0/d' requirements.txt
  #     - name: Install dependencies
  #       run: pip install -r requirements.txt
  #     - name: Build Docker image
  #       run: docker build . -t gitauwairimu/cmd-python-app

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Docker push
  #       run: |
  #         docker push gitauwairimu/cmd-python-app
  
  create_server:
    defaults:
      run:
        working-directory: terraform
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2
    # - name: Terraform fmt
    #   id: fmt
    #   run: terraform fmt -check
    - name: Terraform Init
      id: init
      run: terraform init
    # - name: terraform validate
    #   uses: dflook/terraform-validate@v1
    #   id: validate
    #   with:
    #     path: terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve
  
  create_server2:
    defaults:
      run:
        working-directory: ansible
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    needs: create_server
    steps:
    - name: Confirm Inventory
      run: aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress' --output text > inventory.txt


  

  # Update Inventory:
  #   defaults:
  #     run:
  #       working-directory: ansible
  #   permissions:
  #     pull-requests: write
  #   runs-on: ubuntu-latest
  #   needs: create_server
  #   steps:
  #   # - name: Get Inventory
  #   #   # run: aws ec2 describe-instances \
  #   #   #     --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #   #   #     --output text >> ansible/inventory.txt
  #   #   run: aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress' --output text > ansible/inventory.txt
    
  #   - name: Confirm Inventory is Updated
  #     run: cat ansible/inventory.txt
