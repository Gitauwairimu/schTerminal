name: Build and test

on:
  push:
    branches:
      - main
  workflow_dispatch:

# setting up the access key to aws-cli
env:
   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
   AWS_EC2_METADATA_DISABLED: true
   AWS_DEFAULT_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      # - name: Install Flake8
      #   run: pip install flake8
      # - name: Lint Python code
      #   run: flake8 .

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install pytest
  #       run: pip install pytest
  #     - name: Run unit tests
  #       run: pytest


  Docker_Build_and_Push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: sed -i '/pkg-resources==0.0.0/d' requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build Docker image
        run: docker build . -t gitauwairimu/cmd-python-app

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker push
        run: |
          docker push gitauwairimu/cmd-python-app
                
      - name: Update docker-compose.yml
        run: |
          sed -i "s|image: gitauwairimu.*|image: gitauwairimu/cmd-python-app:${GITHUB_RUN_ID}|g" docker-compose.yml
  
      - name: Cat docker-compose.yml
        run: |
          cat docker-compose.yml
      

  provision_server:
    defaults:
      run:
        working-directory: terraform
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    needs: Docker_Build_and_Push
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2
    - name: Setting up SSH key
      run: |
        echo "${{ secrets.SSH_KEY }}" > terminal-app-github.pem
        chmod 600 terminal-app-github.pem
    # - name: Terraform fmt
    #   id: fmt
    #   run: terraform fmt -check
    - name: Terraform Init
      id: init
      run: terraform init
    # - name: terraform validate
    #   uses: dflook/terraform-validate@v1
    #   id: validate
    #   with:
    #     path: terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve
  
  ansible-inventory:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: provision_server
    steps:
    - name: Create ansible directory
      run: mkdir ansible
    - name: Ansible Inventory file
      run: touch inventory.txt
    - name: Install AWS CLI
      run: sudo apt install awscli
    # - name: Get AWS credentials
    #   run: aws configure
    - name: Set Inventory Group
      run: echo '[dockerpostgres]' > inventory.txt
    - name: Get Inventory
      run: aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress' --output text >> inventory.txt
    - name: Upload inventory.txt
      uses: actions/upload-artifact@v3
      with:
        name: inventory
        path: inventory.txt
    - name: Read Inventory
      run: cat inventory.txt

  
  run-ansible-playbbok:
    defaults:
      run:
        working-directory: ansible
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: ansible-inventory
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Download inventory
      uses: actions/download-artifact@v3
      with:
        name: inventory
        path: ansible
    - name: Setting up SSH key
      run: |
        echo "${{ secrets.SSH_KEY }}" > terminal-app-github.pem
        chmod 600 terminal-app-github.pem 
    - name: Ip file
      run: touch ip.txt
    - name: Install AWS CLI
      run: sudo apt install awscli
    - name: Get Inventory
      run: aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress' --output text >> ip.txt
    - name: Cat IP address
      run: |
        cat ip.txt
    - name: Cat IP address
      run: |
        echo "IP=$(cat ip.txt)"

    # - name: Get the IP address
    #   run: |
    #     IP_ADDRESS=(readlink ip.txt)
    # IP_ADDRESS=$(ls)
    # IP_ADDRESS=$(aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress' --output json | jq -r '.[0]')
    # IP_ADDRESS=$( aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress' --output text )
    # IP_ADDRESS=$(cat ip.txt)
    - name: Read Inventory
      run: cat $IP
    - name: Copy the docker-compose file
      run: |
        ssh ubuntu@$IP -i <(echo "${{ secrets.SSH_KEY }}" | tr -d '\r') rsync -av docker-compose.yml ~/

    # - name: Copy the docker-compose file
    #   uses: actions/ssh@v3
    #   with:
    #     hostname: $IP_ADDRESS
    #     username: ubuntu
    #     key: ${{ secrets.SSH_KEY }}
    #     script: |
    #       rsync -av docker-compose.yml ~/

    - name: Copy Docker Compose file to remote
      run: |
        scp -i terminal-app-github.pem docker-compose.yml ubuntu@$IP_ADDRESS:~/ 

    # - name: rsync deployments
    #   uses: burnett01/rsync-deployments@6.0.0
    #   with:
    #     switches: -avzr --delete
    #     path: docker-compose.yml
    #     remote_path: ~/
    #     remote_host: $IP_ADDRESS
    #     remote_user: ubuntu
    #     remote_key: ${{ secrets.SSH_KEY }}

    # - name: Setting up SSH key
    #   run: |
    #     echo "${{ secrets.SSH_KEY }}" > terminal-app-github.pem
    #     chmod 600 terminal-app-github.pem

    - name: playbook
      run: ansible-playbook run-app-docker-compose.yml

    # git commit --allow-empty -m "Empty commit